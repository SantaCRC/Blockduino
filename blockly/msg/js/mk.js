// This file was automatically generated.  Do not modify.

'use strict';

goog.provide('Blockly.Msg.mk');

goog.require('Blockly.Msg');

Blockly.Msg.ADD_COMMENT = "Додај коментар:";
Blockly.Msg.AUTH = "Овластете го извршников за да можете да ја зачувате вашата работа и да можете да ја споделувате.";
Blockly.Msg.CHANGE_VALUE_TITLE = "Смена на вредност:";
Blockly.Msg.CHAT = "Разговарајте со вашиот соработник во ова поле!";
Blockly.Msg.CLEAN_UP = "Limpiar los bloques";  // untranslated
Blockly.Msg.COLLAPSE_ALL = "Собери блокови";
Blockly.Msg.COLLAPSE_BLOCK = "Собери блок";
Blockly.Msg.COLOUR_BLEND_COLOUR1 = "боја 1";
Blockly.Msg.COLOUR_BLEND_COLOUR2 = "боја 2";
Blockly.Msg.COLOUR_BLEND_RATIO = "сооднос";
Blockly.Msg.COLOUR_BLEND_TITLE = "смешај";
Blockly.Msg.COLOUR_BLEND_TOOLTIP = "Меша две бои во даден сооднос (0.0 - 1.0).";
Blockly.Msg.COLOUR_PICKER_HELPURL = "https://mk.wikipedia.org/wiki/Боја";
Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Изберете боја од палетата.";
Blockly.Msg.COLOUR_RANDOM_TITLE = "случајна боја";
Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Избери боја на тепка.";
Blockly.Msg.COLOUR_RGB_BLUE = "сина";
Blockly.Msg.COLOUR_RGB_GREEN = "зелена";
Blockly.Msg.COLOUR_RGB_RED = "црвена";
Blockly.Msg.COLOUR_RGB_TITLE = "боја со";
Blockly.Msg.COLOUR_RGB_TOOLTIP = "Создајте боја со укажаните износи на црвена, зелена и сина. Сите вредности мора да бидат помеѓу 0 и 100.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "излези од јамката";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "продолжи со следното повторување на јамката";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Излези од содржечката јамка.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Saltar el resto de este bucle, y continuar con la siguiente iteración.";  // untranslated
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "ADVERTENCIA: Este bloque puede usarse sólo dentro de un bucle.";  // untranslated
Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://es.wikipedia.org/wiki/Foreach";  // untranslated
Blockly.Msg.CONTROLS_FOREACH_TITLE = "за секој елемент %1 на списокот %2";
Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "Му ја задава променливата „%1“ на секој елемент на списокот, а потоа исполнува наредби.";
Blockly.Msg.CONTROLS_FOR_TITLE = "број со %1 од %2 до %3 со %4";
Blockly.Msg.CONTROLS_FOR_TOOLTIP = "Променливата \"%1\" да ги земе вредностите од почетниот до завршниот број, броејќи според укажаниот интервал и ги исполнува укажаните блокови.";
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "Agregar una condición a este bloque.";  // untranslated
Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "Agregar una condición general final a este bloque.";  // untranslated
Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "Додава, отстранува или прередува делови за прераспоредување на овој блок „ако“.";
Blockly.Msg.CONTROLS_IF_MSG_ELSE = "инаку";
Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "инаку ако";
Blockly.Msg.CONTROLS_IF_MSG_IF = "ако";
Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "Si un valor es verdadero, entonces hacer algunas declaraciones.";  // untranslated
Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "Si un valor es verdadero, entonces hacer el primer bloque de declaraciones.  De lo contrario, hacer el segundo bloque de declaraciones.";  // untranslated
Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "Si el primer valor es verdadero, entonces hacer el primer bloque de declaraciones. De lo contrario, si el segundo valor es verdadero, hacer el segundo bloque de declaraciones.";  // untranslated
Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "Si el primer valor es verdadero, entonces hacer el primer bloque de declaraciones. De lo contrario, si el segundo valor es verdadero, hacer el segundo bloque de declaraciones. Si ninguno de los valores son verdaderos, hacer el último bloque de declaraciones.";  // untranslated
Blockly.Msg.CONTROLS_REPEAT_HELPURL = "https://mk.wikipedia.org/wiki/For-јамка";
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "исполни";
Blockly.Msg.CONTROLS_REPEAT_TITLE = "повтори %1 пати";
Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Исполнува наредби неколку пати.";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "повторувај сè до";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "повторувај додека";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "Додека вредноста е невистинита, исполнува наредби.";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "Додека вредноста е вистинита, исполнува наредби.";
Blockly.Msg.DELETE_ALL_BLOCKS = "Да ги избришам сите %1 блокчиња?";
Blockly.Msg.DELETE_BLOCK = "Избриши блок";
Blockly.Msg.DELETE_X_BLOCKS = "Избриши %1 блока";
Blockly.Msg.DISABLE_BLOCK = "Исклучи блок";
Blockly.Msg.DUPLICATE_BLOCK = "Ископирај";
Blockly.Msg.ENABLE_BLOCK = "Вклучи блок";
Blockly.Msg.EXPAND_ALL = "Рашири блокови";
Blockly.Msg.EXPAND_BLOCK = "Рашири го блокови";
Blockly.Msg.EXTERNAL_INPUTS = "Надворешен внос";
Blockly.Msg.HELP = "Помош";
Blockly.Msg.INLINE_INPUTS = "Внатрешен внос";
Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "crear lista vacía";  // untranslated
Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Devuelve una lista, de longitud 0, sin ningún dato";  // untranslated
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "lista";  // untranslated
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Agregar, eliminar o reorganizar las secciones para reconfigurar este bloque de lista.";  // untranslated
Blockly.Msg.LISTS_CREATE_WITH_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "crear lista con";  // untranslated
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Agregar un elemento a la lista.";  // untranslated
Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Crear una lista con cualquier número de elementos.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_FIRST = "primero";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_FROM_END = "# del final";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_GET = "obtener";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "obtener y eliminar";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_LAST = "último";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_RANDOM = "aleatorio";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_REMOVE = "eliminar";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Devuelve el primer elemento de una lista.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_END = "Devuelve el elemento en la posición especificada en una lista. #1 es el último elemento.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_START = "Devuelve el elemento en la posición especificada en la lista. #1 es el primer elemento.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Devuelve el último elemento de una lista.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Devuelve un elemento aleatorio en una lista.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Elimina y devuelve el primer elemento de una lista.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_END = "Elimina y devuelve el elemento en la posición especificada en la lista. #1 es el último elemento.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_START = "Elimina y devuelve el elemento en la posición especificada en la lista. #1 es el primer elemento.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Elimina y devuelve el último elemento de una lista.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Elimina y devuelve un elemento aleatorio en una lista.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Elimina el primer elemento de una lista.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_END = "Elimina el elemento en la posición especificada en la lista. #1 es el último elemento.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_START = "Elimina el elemento en la posición especificada en la lista. #1 es el primer elemento.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Elimina el último elemento de una lista.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Elimina un elemento aleatorio en una lista.";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "hasta # del final";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "hasta #";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "hasta el último";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "obtener sublista desde el primero";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "obtener sublista desde # del final";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "obtener sublista desde #";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Crea una copia de la parte especificada de una lista.";  // untranslated
Blockly.Msg.LISTS_INDEX_OF_FIRST = "encontrar la primera aparición del elemento";  // untranslated
Blockly.Msg.LISTS_INDEX_OF_LAST = "encontrar la última aparición del elemento";  // untranslated
Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "Devuelve el índice de la primera/última aparición del elemento en la lista. Devuelve 0 si el elemento no se encuentra.";  // untranslated
Blockly.Msg.LISTS_INLIST = "en la lista";  // untranslated
Blockly.Msg.LISTS_ISEMPTY_TITLE = "%1 está vacía";  // untranslated
Blockly.Msg.LISTS_ISEMPTY_TOOLTIP = "Devuelve verdadero si la lista está vacía.";  // untranslated
Blockly.Msg.LISTS_LENGTH_TITLE = "longitud de %1";  // untranslated
Blockly.Msg.LISTS_LENGTH_TOOLTIP = "Devuelve la longitud de una lista.";  // untranslated
Blockly.Msg.LISTS_REPEAT_TITLE = "crear lista con el elemento %1 repetido %2 veces";  // untranslated
Blockly.Msg.LISTS_REPEAT_TOOLTIP = "Crea una lista que consta de un valor dado repetido el número de veces especificado.";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "como";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_INSERT = "insertar en";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_SET = "establecer";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Inserta el elemento al inicio de una lista.";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_END = "Inserta el elemento en la posición especificada en la lista. #1 es el último elemento.";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_START = "Inserta el elemento en la posición especificada en la lista. #1 es el primer elemento.";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Añade el elemento al final de una lista.";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Inserta el elemento aleatoriamente en una lista.";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Establece el primer elemento de una lista.";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_END = "Establece el elemento en la posición especificada en una lista. #1 es el último elemento.";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_START = "Establece el elemento en la posición especificada en una lista. #1 es el primer elemento.";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Establece el último elemento de una lista.";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Establece un elemento aleatorio en una lista.";  // untranslated
Blockly.Msg.LISTS_SORT_HELPURL = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";  // untranslated
Blockly.Msg.LISTS_SORT_ORDER_ASCENDING = "ascendente";  // untranslated
Blockly.Msg.LISTS_SORT_ORDER_DESCENDING = "descendente";  // untranslated
Blockly.Msg.LISTS_SORT_TITLE = "orden %1 %2 %3";  // untranslated
Blockly.Msg.LISTS_SORT_TOOLTIP = "Ordenar una copia de una lista.";  // untranslated
Blockly.Msg.LISTS_SORT_TYPE_IGNORECASE = "alfabético, ignorar mayúscula/minúscula";  // untranslated
Blockly.Msg.LISTS_SORT_TYPE_NUMERIC = "numérico";  // untranslated
Blockly.Msg.LISTS_SORT_TYPE_TEXT = "alfabético";  // untranslated
Blockly.Msg.LISTS_SPLIT_HELPURL = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";  // untranslated
Blockly.Msg.LISTS_SPLIT_LIST_FROM_TEXT = "hacer lista a partir de texto";  // untranslated
Blockly.Msg.LISTS_SPLIT_TEXT_FROM_LIST = "hacer texto a partir de lista";  // untranslated
Blockly.Msg.LISTS_SPLIT_TOOLTIP_JOIN = "Unir una lista de textos en un solo texto, separado por un delimitador.";  // untranslated
Blockly.Msg.LISTS_SPLIT_TOOLTIP_SPLIT = "Dividir el texto en una lista de textos, separando en cada delimitador.";  // untranslated
Blockly.Msg.LISTS_SPLIT_WITH_DELIMITER = "con delimitador";  // untranslated
Blockly.Msg.LOGIC_BOOLEAN_FALSE = "невистина";
Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "Дава или вистина или невистина.";
Blockly.Msg.LOGIC_BOOLEAN_TRUE = "вистина";
Blockly.Msg.LOGIC_COMPARE_HELPURL = "https://mk.wikipedia.org/wiki/Неравенство";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Дава вистина ако обата вноса се еднакви.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Дава вистина ако првиот внос е поголем од вториот.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Дава вистина ако првиот внос е поголем или еднаков на вториот.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Дава вистина ако првиот внос е помал од вториот.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Дава вистина ако првиот внос е помал или еднаков на  вториот.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Дава вистина ако обата вноса не се еднакви.";
Blockly.Msg.LOGIC_NEGATE_TITLE = "не %1";
Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "Дава вистина ако вносот е невистинит. Дава невистина ако вносот е вистинит.";
Blockly.Msg.LOGIC_NULL = "ништо";
Blockly.Msg.LOGIC_NULL_TOOLTIP = "Дава ништо.";
Blockly.Msg.LOGIC_OPERATION_AND = "и";
Blockly.Msg.LOGIC_OPERATION_OR = "или";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Дава вистина ако обата вноса се вистинити.";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Дава вистина ако барем еден од вносовите е вистинит.";
Blockly.Msg.LOGIC_TERNARY_CONDITION = "испробај";
Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "ако е невистинито";
Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "ако е вистинито";
Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "Comprueba la condición en \"prueba\". Si la condición es verdadera, devuelve el valor \"si es verdadero\"; de lo contrario, devuelve el valor \"si es falso\".";  // untranslated
Blockly.Msg.MATH_ARITHMETIC_HELPURL = "https://es.wikipedia.org/wiki/Aritmética";  // untranslated
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "Devuelve la suma de ambos números.";  // untranslated
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Devuelve el cociente de ambos números.";  // untranslated
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "Devuelve la diferencia de ambos números.";  // untranslated
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Devuelve el producto de ambos números.";  // untranslated
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Devuelve el primer número elevado a la potencia del segundo.";  // untranslated
Blockly.Msg.MATH_CHANGE_HELPURL = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter?uselang=mk";
Blockly.Msg.MATH_CHANGE_TITLE = "повиши %1 за %2";
Blockly.Msg.MATH_CHANGE_TOOLTIP = "Ѝ додава број на променливата „%1“.";
Blockly.Msg.MATH_CONSTANT_HELPURL = "https://mk.wikipedia.org/wiki/Математичка_константа";
Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Дава една од вообичаените константи: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), или ∞ (бесконечност).";
Blockly.Msg.MATH_CONSTRAIN_TITLE = "limitar %1 entre %2 y %3";  // untranslated
Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Limitar un número entre los límites especificados (inclusive).";  // untranslated
Blockly.Msg.MATH_IS_DIVISIBLE_BY = "е делив со";
Blockly.Msg.MATH_IS_EVEN = "е парен";
Blockly.Msg.MATH_IS_NEGATIVE = "е негативен";
Blockly.Msg.MATH_IS_ODD = "е непарен";
Blockly.Msg.MATH_IS_POSITIVE = "е позитивен";
Blockly.Msg.MATH_IS_PRIME = "е прост";
Blockly.Msg.MATH_IS_TOOLTIP = "Проверува дали бројот е парен, непарен, прост, цел, позитивен, негативен или делив со некој број. Дава вистина или невистина.";
Blockly.Msg.MATH_IS_WHOLE = "е цел";
Blockly.Msg.MATH_MODULO_HELPURL = "https://en.wikipedia.org/wiki/Modulo_operation";  // untranslated
Blockly.Msg.MATH_MODULO_TITLE = "resto de %1 ÷ %2";  // untranslated
Blockly.Msg.MATH_MODULO_TOOLTIP = "Devuelve el resto al dividir los dos números.";  // untranslated
Blockly.Msg.MATH_NUMBER_HELPURL = "https://es.wikipedia.org/wiki/Número";  // untranslated
Blockly.Msg.MATH_NUMBER_TOOLTIP = "Un número.";  // untranslated
Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "просек на списокот";
Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "најголем на списокот";
Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "медијана на списокот";
Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "најмал на списокот";
Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "модул на списокот";
Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "elemento aleatorio de la lista";  // untranslated
Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "desviación estándar de la lista";  // untranslated
Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "збир од списокот";
Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Дава просек (аритметичка средина) од броевите на списокот.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "Го дава најголемиот број на списокот.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "Дава медијана од броевите на списокот.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "Го дава најмалиот број на списокот.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "Дава список на најзастапен(и) елемент(и) на списокот.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "Devuelve un elemento aleatorio de la lista.";  // untranslated
Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "Devuelve la desviación estándar de la lista.";  // untranslated
Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "Дава збир од сите броеви на списокот.";
Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://es.wikipedia.org/wiki/Generador_de_números_aleatorios";  // untranslated
Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "fracción aleatoria";  // untranslated
Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Devuelve una fracción aleatoria entre 0,0 (ambos inclusive) y 1.0 (exclusivo).";  // untranslated
Blockly.Msg.MATH_RANDOM_INT_HELPURL = "https://es.wikipedia.org/wiki/Generador_de_números_aleatorios";  // untranslated
Blockly.Msg.MATH_RANDOM_INT_TITLE = "entero aleatorio de %1 a %2";  // untranslated
Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Devuelve un entero aleatorio entre los dos límites especificados, inclusive.";  // untranslated
Blockly.Msg.MATH_ROUND_HELPURL = "https://mk.wikipedia.org/wiki/Заокружување";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "заокружи";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDDOWN = "заокружи на помало";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDUP = "заокружи на поголемо";
Blockly.Msg.MATH_ROUND_TOOLTIP = "Го заокружува бројот на поголем или помал.";
Blockly.Msg.MATH_SINGLE_HELPURL = "https://es.wikipedia.org/wiki/Ra%C3%ADz_cuadrada";  // untranslated
Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "absoluto";  // untranslated
Blockly.Msg.MATH_SINGLE_OP_ROOT = "raíz cuadrada";  // untranslated
Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "Devuelve el valor absoluto de un número.";  // untranslated
Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "Devuelve e a la potencia de un número.";  // untranslated
Blockly.Msg.MATH_SINGLE_TOOLTIP_LN = "Devuelve el logaritmo natural de un número.";  // untranslated
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "Devuelve el logaritmo base 10 de un número.";  // untranslated
Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "Devuelve la negación de un número.";  // untranslated
Blockly.Msg.MATH_SINGLE_TOOLTIP_POW10 = "Devuelve 10 a la potencia de un número.";  // untranslated
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "Devuelve la raíz cuadrada de un número.";  // untranslated
Blockly.Msg.MATH_TRIG_HELPURL = "https://es.wikipedia.org/wiki/Función_trigonométrica";  // untranslated
Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "Devuelve el arcocoseno de un número.";  // untranslated
Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "Devuelve el arcoseno de un número.";  // untranslated
Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "Devuelve el arcotangente de un número.";  // untranslated
Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "Devuelve el coseno de un grado (no radián).";  // untranslated
Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "Devuelve el seno de un grado (no radián).";  // untranslated
Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "Devuelve la tangente de un grado (no radián).";  // untranslated
Blockly.Msg.ME = "Мене";
Blockly.Msg.NEW_VARIABLE = "Нова променлива...";
Blockly.Msg.NEW_VARIABLE_TITLE = "Назив на новата променлива:";
Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "permitir declaraciones";  // untranslated
Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "con:";  // untranslated
Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "https://es.wikipedia.org/wiki/Subrutina";  // untranslated
Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "Ejecuta la función definida por el usuario '%1'.";  // untranslated
Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://es.wikipedia.org/wiki/Subrutina";  // untranslated
Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "Ejecuta la función definida por el usuario '%1' y usa su salida.";  // untranslated
Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "con:";  // untranslated
Blockly.Msg.PROCEDURES_CREATE_DO = "Crear '%1'";  // untranslated
Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT = "Describe esta función...";  // untranslated
Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "hacer algo";  // untranslated
Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "para";  // untranslated
Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Crea una función sin salida.";  // untranslated
Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "devuelve";  // untranslated
Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Crea una función con una salida.";  // untranslated
Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Advertencia: Esta función tiene parámetros duplicados.";  // untranslated
Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Destacar definición de la función";  // untranslated
Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "Si un valor es verdadero, entonces devuelve un segundo valor.";  // untranslated
Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Advertencia: Este bloque solo puede ser utilizado dentro de la definición de una función.";  // untranslated
Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "nombre de entrada:";  // untranslated
Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "Añadir una entrada a la función.";  // untranslated
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "entradas";  // untranslated
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Añadir, eliminar o reordenar entradas para esta función.";  // untranslated
Blockly.Msg.REDO = "Rehacer";  // untranslated
Blockly.Msg.REMOVE_COMMENT = "Отстрани коментар";
Blockly.Msg.RENAME_VARIABLE = "Преименувај променлива...";
Blockly.Msg.RENAME_VARIABLE_TITLE = "Преименувај ги сите променливи „%1“ во:";
Blockly.Msg.TEXT_APPEND_APPENDTEXT = "añadir texto";  // untranslated
Blockly.Msg.TEXT_APPEND_TO = "a";  // untranslated
Blockly.Msg.TEXT_APPEND_TOOLTIP = "Añadir texto a la variable '%1'.";  // untranslated
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "a minúsculas";  // untranslated
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "a Mayúsculas Cada Palabra";  // untranslated
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "a MAYÚSCULAS";  // untranslated
Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Devuelve una copia del texto en un caso diferente.";  // untranslated
Blockly.Msg.TEXT_CHARAT_FIRST = "obtener la primera letra";  // untranslated
Blockly.Msg.TEXT_CHARAT_FROM_END = "obtener la letra # del final";  // untranslated
Blockly.Msg.TEXT_CHARAT_FROM_START = "obtener la letra #";  // untranslated
Blockly.Msg.TEXT_CHARAT_INPUT_INTEXT = "en el texto";  // untranslated
Blockly.Msg.TEXT_CHARAT_LAST = "obtener la última letra";  // untranslated
Blockly.Msg.TEXT_CHARAT_RANDOM = "obtener letra aleatoria";  // untranslated
Blockly.Msg.TEXT_CHARAT_TOOLTIP = "Devuelve la letra en la posición especificada.";  // untranslated
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Agregar un elemento al texto.";  // untranslated
Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "unir";  // untranslated
Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Agregar, eliminar o reordenar las secciones para reconfigurar este bloque de texto.";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "hasta la letra # del final";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "hasta la letra #";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "hasta la última letra";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "en el texto";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "obtener subcadena desde la primera letra";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "obtener subcadena desde la letra # del final";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "obtener subcadena desde la letra #";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Devuelve una porción determinada del texto.";  // untranslated
Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = "en el texto";  // untranslated
Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "encontrar la primera aparición del texto";  // untranslated
Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "encontrar la última aparición del texto";  // untranslated
Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "Devuelve el índice de la primera/última aparición del primer texto en el segundo texto. Devuelve 0 si el texto no se encuentra.";  // untranslated
Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 está vacío";  // untranslated
Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Devuelve verdadero si el texto proporcionado está vacío.";  // untranslated
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "crear texto con";  // untranslated
Blockly.Msg.TEXT_JOIN_TOOLTIP = "Crear un fragmento de texto al unir cualquier número de elementos.";  // untranslated
Blockly.Msg.TEXT_LENGTH_TITLE = "longitud de %1";  // untranslated
Blockly.Msg.TEXT_LENGTH_TOOLTIP = "Devuelve el número de letras (incluyendo espacios) en el texto proporcionado.";  // untranslated
Blockly.Msg.TEXT_PRINT_TITLE = "imprimir %1";  // untranslated
Blockly.Msg.TEXT_PRINT_TOOLTIP = "Imprimir el texto, número u otro valor especificado.";  // untranslated
Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Solicitar al usuario un número.";  // untranslated
Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Solicitar al usuario un texto.";  // untranslated
Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "solicitar número con el mensaje";  // untranslated
Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "solicitar texto con el mensaje";  // untranslated
Blockly.Msg.TEXT_TEXT_HELPURL = "https://es.wikipedia.org/wiki/Cadena_de_caracteres";  // untranslated
Blockly.Msg.TEXT_TEXT_TOOLTIP = "Una letra, palabra o línea de texto.";  // untranslated
Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "quitar espacios de ambos lados de";  // untranslated
Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "quitar espacios iniciales de";  // untranslated
Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "quitar espacios finales de";  // untranslated
Blockly.Msg.TEXT_TRIM_TOOLTIP = "Devuelve una copia del texto sin los espacios de uno o ambos extremos.";  // untranslated
Blockly.Msg.TODAY = "Hoy";  // untranslated
Blockly.Msg.UNDO = "Deshacer";  // untranslated
Blockly.Msg.VARIABLES_DEFAULT_NAME = "елемент";
Blockly.Msg.VARIABLES_GET_CREATE_SET = "Crear 'establecer %1'";  // untranslated
Blockly.Msg.VARIABLES_GET_TOOLTIP = "Devuelve el valor de esta variable.";  // untranslated
Blockly.Msg.VARIABLES_SET = "establecer %1 a %2";  // untranslated
Blockly.Msg.VARIABLES_SET_CREATE_GET = "Crear 'obtener %1'";  // untranslated
Blockly.Msg.VARIABLES_SET_TOOLTIP = "Establece esta variable para que sea igual a la entrada.";  // untranslated
Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;
Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_DEFRETURN_COMMENT = Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT;

// Ardublockly strings
Blockly.Msg.ARD_ANALOGREAD = "read analog pin#";  // untranslated
Blockly.Msg.ARD_ANALOGREAD_TIP = "Return value between 0 and 1024";  // untranslated
Blockly.Msg.ARD_ANALOGWRITE = "set analog pin#";  // untranslated
Blockly.Msg.ARD_ANALOGWRITE_TIP = "Write analog value between 0 and 255 to a specific PWM Port";  // untranslated
Blockly.Msg.ARD_BUILTIN_LED = "set built-in LED";  // untranslated
Blockly.Msg.ARD_BUILTIN_LED_TIP = "Light on or off for the built-in LED of the Arduino";  // untranslated
Blockly.Msg.ARD_COMPONENT_WARN1 = "A %1 configuration block with the same %2 name must be added to use this block!";  // untranslated
Blockly.Msg.ARD_DEFINE = "Define";  // untranslated
Blockly.Msg.ARD_DIGITALREAD = "read digital pin#";  // untranslated
Blockly.Msg.ARD_DIGITALREAD_TIP = "Read digital value on a pin: HIGH or LOW";  // untranslated
Blockly.Msg.ARD_DIGITALWRITE = "set digitial pin#";  // untranslated
Blockly.Msg.ARD_DIGITALWRITE_TIP = "Write digital value HIGH or LOW to a specific Port";  // untranslated
Blockly.Msg.ARD_FUN_RUN_LOOP = "Arduino loop forever:";  // untranslated
Blockly.Msg.ARD_FUN_RUN_SETUP = "Arduino run first:";  // untranslated
Blockly.Msg.ARD_FUN_RUN_TIP = "Defines the Arduino setup() and loop() functions.";  // untranslated
Blockly.Msg.ARD_HIGH = "HIGH";  // untranslated
Blockly.Msg.ARD_HIGHLOW_TIP = "Set a pin state logic High or Low.";  // untranslated
Blockly.Msg.ARD_LOW = "LOW";  // untranslated
Blockly.Msg.ARD_MAP = "Map";  // untranslated
Blockly.Msg.ARD_MAP_TIP = "Re-maps a number from [0-1024] to another.";  // untranslated
Blockly.Msg.ARD_MAP_VAL = "value to [0-";  // untranslated
Blockly.Msg.ARD_NOTONE = "Turn off tone on pin #";  // untranslated
Blockly.Msg.ARD_NOTONE_PIN = "No tone PIN#";  // untranslated
Blockly.Msg.ARD_NOTONE_PIN_TIP = "Stop generating a tone on a pin";  // untranslated
Blockly.Msg.ARD_NOTONE_TIP = "Turns the tone off on the selected pin";  // untranslated
Blockly.Msg.ARD_PIN_WARN1 = "Pin %1 is needed for %2 as pin %3. Already used as %4.";  // untranslated
Blockly.Msg.ARD_PULSETIMEOUT_TIP = "Measures the duration of a pulse on the selected pin, if it is within the time-out in microseconds.";  // untranslated
Blockly.Msg.ARD_PULSE_READ = "measure %1 pulse on pin #%2";  // untranslated
Blockly.Msg.ARD_PULSE_READ_TIMEOUT = "measure %1 pulse on pin #%2 (timeout after %3 μs)";  // untranslated
Blockly.Msg.ARD_PULSE_TIP = "Measures the duration of a pulse on the selected pin.";  // untranslated
Blockly.Msg.ARD_SERIAL_BPS = "bps";  // untranslated
Blockly.Msg.ARD_SERIAL_PRINT = "print";  // untranslated
Blockly.Msg.ARD_SERIAL_PRINT_NEWLINE = "add new line";  // untranslated
Blockly.Msg.ARD_SERIAL_PRINT_TIP = "Prints data to the console/serial port as human-readable ASCII text.";  // untranslated
Blockly.Msg.ARD_SERIAL_PRINT_WARN = "A setup block for %1 must be added to the workspace to use this block!";  // untranslated
Blockly.Msg.ARD_SERIAL_SETUP = "Setup";  // untranslated
Blockly.Msg.ARD_SERIAL_SETUP_TIP = "Selects the speed for a specific Serial peripheral";  // untranslated
Blockly.Msg.ARD_SERIAL_SPEED = ":  speed to";  // untranslated
Blockly.Msg.ARD_SERVO_READ = "read SERVO from PIN#";  // untranslated
Blockly.Msg.ARD_SERVO_READ_TIP = "Read a Servo angle";  // untranslated
Blockly.Msg.ARD_SERVO_WRITE = "set SERVO from Pin";  // untranslated
Blockly.Msg.ARD_SERVO_WRITE_DEG_180 = "Degrees (0~180)";  // untranslated
Blockly.Msg.ARD_SERVO_WRITE_TIP = "Set a Servo to an specified angle";  // untranslated
Blockly.Msg.ARD_SERVO_WRITE_TO = "to";  // untranslated
Blockly.Msg.ARD_SETTONE = "Set tone on pin #";  // untranslated
Blockly.Msg.ARD_SPI_SETUP = "Setup";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_CONF = "configuration:";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_DIVIDE = "clock divide";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_LSBFIRST = "LSBFIRST";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_MODE = "SPI mode (idle - edge)";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_MODE0 = "0 (Low - Falling)";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_MODE1 = "1 (Low - Rising)";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_MODE2 = "2 (High - Falling)";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_MODE3 = "3 (High - Rising)";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_MSBFIRST = "MSBFIRST";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_SHIFT = "data shift";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_TIP = "Configures the SPI peripheral.";  // untranslated
Blockly.Msg.ARD_SPI_TRANSRETURN_TIP = "Send a SPI message to an specified slave device and get data back.";  // untranslated
Blockly.Msg.ARD_SPI_TRANS_NONE = "none";  // untranslated
Blockly.Msg.ARD_SPI_TRANS_SLAVE = "to slave pin";  // untranslated
Blockly.Msg.ARD_SPI_TRANS_TIP = "Send a SPI message to an specified slave device.";  // untranslated
Blockly.Msg.ARD_SPI_TRANS_VAL = "transfer";  // untranslated
Blockly.Msg.ARD_SPI_TRANS_WARN1 = "A setup block for %1 must be added to the workspace to use this block!";  // untranslated
Blockly.Msg.ARD_SPI_TRANS_WARN2 = "Old pin value %1 is no longer available.";  // untranslated
Blockly.Msg.ARD_STEPPER_COMPONENT = "stepper";  // untranslated
Blockly.Msg.ARD_STEPPER_DEFAULT_NAME = "MyStepper";  // untranslated
Blockly.Msg.ARD_STEPPER_FOUR_PINS = "4";  // untranslated
Blockly.Msg.ARD_STEPPER_MOTOR = "stepper motor:";  // untranslated
Blockly.Msg.ARD_STEPPER_NUMBER_OF_PINS = "Number of pins";  // untranslated
Blockly.Msg.ARD_STEPPER_PIN1 = "pin1#";  // untranslated
Blockly.Msg.ARD_STEPPER_PIN2 = "pin2#";  // untranslated
Blockly.Msg.ARD_STEPPER_PIN3 = "pin3#";  // untranslated
Blockly.Msg.ARD_STEPPER_PIN4 = "pin4#";  // untranslated
Blockly.Msg.ARD_STEPPER_REVOLVS = "how many steps per revolution";  // untranslated
Blockly.Msg.ARD_STEPPER_SETUP = "Setup stepper motor";  // untranslated
Blockly.Msg.ARD_STEPPER_SETUP_TIP = "Configures a stepper motor pinout and other settings.";  // untranslated
Blockly.Msg.ARD_STEPPER_SPEED = "set speed (rpm) to";  // untranslated
Blockly.Msg.ARD_STEPPER_STEP = "move stepper";  // untranslated
Blockly.Msg.ARD_STEPPER_STEPS = "steps";  // untranslated
Blockly.Msg.ARD_STEPPER_STEP_TIP = "Turns the stepper motor a specific number of steps.";  // untranslated
Blockly.Msg.ARD_STEPPER_TWO_PINS = "2";  // untranslated
Blockly.Msg.ARD_TIME_DELAY = "wait";  // untranslated
Blockly.Msg.ARD_TIME_DELAY_MICROS = "microseconds";  // untranslated
Blockly.Msg.ARD_TIME_DELAY_MICRO_TIP = "Wait specific time in microseconds";  // untranslated
Blockly.Msg.ARD_TIME_DELAY_TIP = "Wait specific time in milliseconds";  // untranslated
Blockly.Msg.ARD_TIME_INF = "wait forever (end program)";  // untranslated
Blockly.Msg.ARD_TIME_INF_TIP = "Wait indefinitely, stopping the program.";  // untranslated
Blockly.Msg.ARD_TIME_MICROS = "current elapsed Time (microseconds)";  // untranslated
Blockly.Msg.ARD_TIME_MICROS_TIP = "Returns the number of microseconds since the Arduino board began running the current program. Has to be stored in a positive long integer";  // untranslated
Blockly.Msg.ARD_TIME_MILLIS = "current elapsed Time (milliseconds)";  // untranslated
Blockly.Msg.ARD_TIME_MILLIS_TIP = "Returns the number of milliseconds since the Arduino board began running the current program. Has to be stored in a positive long integer";  // untranslated
Blockly.Msg.ARD_TIME_MS = "milliseconds";  // untranslated
Blockly.Msg.ARD_TONEFREQ = "at frequency";  // untranslated
Blockly.Msg.ARD_TONE_FREQ = "frequency";  // untranslated
Blockly.Msg.ARD_TONE_PIN = "Tone PIN#";  // untranslated
Blockly.Msg.ARD_TONE_PIN_TIP = "Generate audio tones on a pin";  // untranslated
Blockly.Msg.ARD_TONE_TIP = "Sets tone on pin to specified frequency within range 31 - 65535";  // untranslated
Blockly.Msg.ARD_TONE_WARNING = "Frequency must be in range 31 - 65535";  // untranslated
Blockly.Msg.ARD_TYPE_ARRAY = "Array";  // untranslated
Blockly.Msg.ARD_TYPE_BOOL = "Boolean";  // untranslated
Blockly.Msg.ARD_TYPE_CHAR = "Character";  // untranslated
Blockly.Msg.ARD_TYPE_CHILDBLOCKMISSING = "ChildBlockMissing";  // untranslated
Blockly.Msg.ARD_TYPE_DECIMAL = "Decimal";  // untranslated
Blockly.Msg.ARD_TYPE_LONG = "Large Number";  // untranslated
Blockly.Msg.ARD_TYPE_NULL = "Null";  // untranslated
Blockly.Msg.ARD_TYPE_NUMBER = "Number";  // untranslated
Blockly.Msg.ARD_TYPE_SHORT = "Short Number";  // untranslated
Blockly.Msg.ARD_TYPE_TEXT = "Text";  // untranslated
Blockly.Msg.ARD_TYPE_UNDEF = "Undefined";  // untranslated
Blockly.Msg.ARD_VAR_AS = "como";  // untranslated
Blockly.Msg.ARD_VAR_AS_TIP = "Establecer una variable a un tipo especifico";  // untranslated
Blockly.Msg.ARD_WRITE_TO = "to";  // untranslated
Blockly.Msg.NEW_INSTANCE = "New instance...";  // untranslated
Blockly.Msg.NEW_INSTANCE_TITLE = "New instance name:";  // untranslated
Blockly.Msg.RENAME_INSTANCE = "Rename instance...";  // untranslated
Blockly.Msg.RENAME_INSTANCE_TITLE = "Rename all '%1' instances to:";  // untranslated
